{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-02-21T11:49:57.693570Z",
     "start_time": "2025-02-21T11:49:57.689061Z"
    }
   },
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import ast\n",
    "import spacy\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from lime.lime_text import LimeTextExplainer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "import matplotlib.pyplot  as plt\n",
    "import seaborn as sns\n",
    "import re\n",
    "from tqdm import tqdm\n",
    "import openai\n",
    "from gensim.models import KeyedVectors\n",
    "from typing import Tuple, List\n",
    "from joblib import Parallel, delayed"
   ],
   "outputs": [],
   "execution_count": 23
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-21T11:42:32.675385Z",
     "start_time": "2025-02-21T11:42:32.165591Z"
    }
   },
   "cell_type": "code",
   "source": "df = pd.read_csv('Embeddings.csv')",
   "id": "ba53667506edca9",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-21T11:50:05.062800Z",
     "start_time": "2025-02-21T11:50:04.991379Z"
    }
   },
   "cell_type": "code",
   "source": [
    "def convert_embedding(x):\n",
    "    if isinstance(x, str):\n",
    "        x_clean = x.strip(\"[]\")\n",
    "        return np.fromstring(x_clean, sep=' ')\n",
    "    return x\n",
    "\n",
    "df['Sentence_Average_Embeddings'] = df['Sentence_Average_Embeddings'].apply(convert_embedding)\n",
    "\n",
    "df['Embeddings'] = df['Embeddings'].apply(\n",
    "    lambda x: [x[0].tolist()] if isinstance(x, list) and len(x) > 0 and isinstance(x[0], np.ndarray) else x\n",
    ")"
   ],
   "id": "2058135cd2dc66ed",
   "outputs": [],
   "execution_count": 24
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-21T11:50:06.373953Z",
     "start_time": "2025-02-21T11:50:06.357766Z"
    }
   },
   "cell_type": "code",
   "source": [
    "df = df.sample(frac=1).reset_index(drop=True)\n",
    "df"
   ],
   "id": "e1cc9f952c2057a9",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                     Image                                        Description  \\\n",
       "0     n07716358_11220.JPEG   Fried snacks arranged neatly with dipping sauce.   \n",
       "1      n07716358_9042.JPEG       Sliced zucchini arranged on a cutting board.   \n",
       "2      n07716358_4456.JPEG        Long green zucchini on white tiled surface.   \n",
       "3     n07716358_13984.JPEG     Zucchini growing beside vibrant yellow flower.   \n",
       "4      n07718472_3346.JPEG  Fresh vegetables: tomatoes, cucumber, zucchini...   \n",
       "...                    ...                                                ...   \n",
       "2355   n07716358_3785.JPEG        Man smiling while holding a large zucchini.   \n",
       "2356  n07716358_12903.JPEG  Sliced vegetables including cucumber and carro...   \n",
       "2357  n07716358_22588.JPEG        Fresh green zucchini on a white background.   \n",
       "2358   n07718472_1821.JPEG  Two cucumbers displayed alongside a measuring ...   \n",
       "2359    n07718472_758.JPEG      Colorful platter of vegetables and flatbread.   \n",
       "\n",
       "         Class                              Description_processed  \\\n",
       "0     zucchini         fried snack arrange neatly with dip sauce    \n",
       "1     zucchini         slice zucchini arrange on a cutting board    \n",
       "2     zucchini        long green zucchini on white tiled surface    \n",
       "3     zucchini        Zucchini grow beside vibrant yellow flower    \n",
       "4     cucumber  fresh vegetable tomato cucumber zucchini and b...   \n",
       "...        ...                                                ...   \n",
       "2355  zucchini             man smile while hold a large zucchini    \n",
       "2356  zucchini  slice vegetable include cucumber and carrot di...   \n",
       "2357  zucchini        fresh green zucchini on a white background    \n",
       "2358  cucumber     two cucumber display alongside a measure tape    \n",
       "2359  cucumber       colorful platter of vegetable and flatbread    \n",
       "\n",
       "                            Sentence_Average_Embeddings  \\\n",
       "0     [-0.119227819, -0.0373273566, -0.0236990787, 0...   \n",
       "1     [-0.0478413887, 0.0287272129, -0.00160725915, ...   \n",
       "2     [-0.09151786, 0.13964844, 0.04190499, 0.091692...   \n",
       "3     [-0.06217448, 0.05712891, -0.00675456, 0.14343...   \n",
       "4     [-0.107218422, 0.137471512, 0.126708984, 0.247...   \n",
       "...                                                 ...   \n",
       "2355  [0.117553711, 0.0965576172, 0.0643310547, 0.10...   \n",
       "2356  [-0.01490275, 0.08829752, 0.03326416, 0.161804...   \n",
       "2357  [0.01713053, 0.06762695, 0.0401001, 0.05361938...   \n",
       "2358  [0.00699869776, 0.11831665, -0.0138600664, 0.0...   \n",
       "2359  [-0.0914306641, 0.0349121094, 0.0896706581, 0....   \n",
       "\n",
       "                                             Embeddings  \n",
       "0     [array([-2.57812500e-01, -1.27563477e-02,  8.9...  \n",
       "1     [array([-0.00299072, -0.11816406,  0.09179688,...  \n",
       "2     [array([-1.43554688e-01,  1.04492188e-01, -1.9...  \n",
       "3     [array([-2.29492188e-01,  3.32031250e-02, -1.1...  \n",
       "4     [array([-0.04223633,  0.01806641,  0.22070312,...  \n",
       "...                                                 ...  \n",
       "2355  [array([ 0.32617188,  0.13085938,  0.03466797,...  \n",
       "2356  [array([-0.00299072, -0.11816406,  0.09179688,...  \n",
       "2357  [array([-0.04223633,  0.01806641,  0.22070312,...  \n",
       "2358  [array([ 0.03173828, -0.10644531,  0.00241089,...  \n",
       "2359  [array([ 0.03344727, -0.0234375 , -0.0112915 ,...  \n",
       "\n",
       "[2360 rows x 6 columns]"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Image</th>\n",
       "      <th>Description</th>\n",
       "      <th>Class</th>\n",
       "      <th>Description_processed</th>\n",
       "      <th>Sentence_Average_Embeddings</th>\n",
       "      <th>Embeddings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>n07716358_11220.JPEG</td>\n",
       "      <td>Fried snacks arranged neatly with dipping sauce.</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>fried snack arrange neatly with dip sauce</td>\n",
       "      <td>[-0.119227819, -0.0373273566, -0.0236990787, 0...</td>\n",
       "      <td>[array([-2.57812500e-01, -1.27563477e-02,  8.9...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>n07716358_9042.JPEG</td>\n",
       "      <td>Sliced zucchini arranged on a cutting board.</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>slice zucchini arrange on a cutting board</td>\n",
       "      <td>[-0.0478413887, 0.0287272129, -0.00160725915, ...</td>\n",
       "      <td>[array([-0.00299072, -0.11816406,  0.09179688,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>n07716358_4456.JPEG</td>\n",
       "      <td>Long green zucchini on white tiled surface.</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>long green zucchini on white tiled surface</td>\n",
       "      <td>[-0.09151786, 0.13964844, 0.04190499, 0.091692...</td>\n",
       "      <td>[array([-1.43554688e-01,  1.04492188e-01, -1.9...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>n07716358_13984.JPEG</td>\n",
       "      <td>Zucchini growing beside vibrant yellow flower.</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>Zucchini grow beside vibrant yellow flower</td>\n",
       "      <td>[-0.06217448, 0.05712891, -0.00675456, 0.14343...</td>\n",
       "      <td>[array([-2.29492188e-01,  3.32031250e-02, -1.1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>n07718472_3346.JPEG</td>\n",
       "      <td>Fresh vegetables: tomatoes, cucumber, zucchini...</td>\n",
       "      <td>cucumber</td>\n",
       "      <td>fresh vegetable tomato cucumber zucchini and b...</td>\n",
       "      <td>[-0.107218422, 0.137471512, 0.126708984, 0.247...</td>\n",
       "      <td>[array([-0.04223633,  0.01806641,  0.22070312,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2355</th>\n",
       "      <td>n07716358_3785.JPEG</td>\n",
       "      <td>Man smiling while holding a large zucchini.</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>man smile while hold a large zucchini</td>\n",
       "      <td>[0.117553711, 0.0965576172, 0.0643310547, 0.10...</td>\n",
       "      <td>[array([ 0.32617188,  0.13085938,  0.03466797,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2356</th>\n",
       "      <td>n07716358_12903.JPEG</td>\n",
       "      <td>Sliced vegetables including cucumber and carro...</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>slice vegetable include cucumber and carrot di...</td>\n",
       "      <td>[-0.01490275, 0.08829752, 0.03326416, 0.161804...</td>\n",
       "      <td>[array([-0.00299072, -0.11816406,  0.09179688,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2357</th>\n",
       "      <td>n07716358_22588.JPEG</td>\n",
       "      <td>Fresh green zucchini on a white background.</td>\n",
       "      <td>zucchini</td>\n",
       "      <td>fresh green zucchini on a white background</td>\n",
       "      <td>[0.01713053, 0.06762695, 0.0401001, 0.05361938...</td>\n",
       "      <td>[array([-0.04223633,  0.01806641,  0.22070312,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2358</th>\n",
       "      <td>n07718472_1821.JPEG</td>\n",
       "      <td>Two cucumbers displayed alongside a measuring ...</td>\n",
       "      <td>cucumber</td>\n",
       "      <td>two cucumber display alongside a measure tape</td>\n",
       "      <td>[0.00699869776, 0.11831665, -0.0138600664, 0.0...</td>\n",
       "      <td>[array([ 0.03173828, -0.10644531,  0.00241089,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2359</th>\n",
       "      <td>n07718472_758.JPEG</td>\n",
       "      <td>Colorful platter of vegetables and flatbread.</td>\n",
       "      <td>cucumber</td>\n",
       "      <td>colorful platter of vegetable and flatbread</td>\n",
       "      <td>[-0.0914306641, 0.0349121094, 0.0896706581, 0....</td>\n",
       "      <td>[array([ 0.03344727, -0.0234375 , -0.0112915 ,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2360 rows × 6 columns</p>\n",
       "</div>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 26
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Train LR",
   "id": "495b4c072cf76ba9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-21T11:50:33.601730Z",
     "start_time": "2025-02-21T11:50:33.560713Z"
    }
   },
   "cell_type": "code",
   "source": [
    "X = np.stack(df['Sentence_Average_Embeddings'].values)\n",
    "y = df['Class']\n",
    "\n",
    "train_size = 2000\n",
    "X_train = X[:train_size]\n",
    "X_test = X[train_size+1:]\n",
    "X_test_embeddings = df['Embeddings'][train_size+1:].reset_index(drop=True)\n",
    "\n",
    "y_train = y[:train_size]\n",
    "y_test = y[train_size+1:]\n",
    "\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "accuracy = model.score(X_test, y_test)\n",
    "print(\"Accuracy:\", accuracy)"
   ],
   "id": "8bca7a358c560fbb",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9192200557103064\n"
     ]
    }
   ],
   "execution_count": 27
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-21T11:50:52.440209Z",
     "start_time": "2025-02-21T11:50:35.028594Z"
    }
   },
   "cell_type": "code",
   "source": [
    "def process_instance_lime(i, text, label):\n",
    "    explained = explainer.explain_instance(text, predict_probabilities_from_text, num_features=15)\n",
    "    lime_word_importances = explained.as_list()\n",
    "    importances_df = pd.DataFrame(lime_word_importances, columns=[\"word\", \"importance\"])\n",
    "    importances_df[\"class\"] = label\n",
    "    importances_df[\"Description_processed\"] = text\n",
    "    importances_df['importance']=importances_df['importance'].abs()\n",
    "    return importances_df\n",
    "\n",
    "def process_instance_smer(i, text, label):\n",
    "    # Original prediction for the full text\n",
    "    original_pred = predict_probabilities_from_text([text])[0]\n",
    "    original_class = np.argmax(original_pred)  # Determine predicted class\n",
    "    importance_rows = []\n",
    "\n",
    "    # Split the text into words\n",
    "    words = text.split()\n",
    "\n",
    "    # Iteratively remove each word and measure the impact on the probability\n",
    "    for word in words:\n",
    "        altered_text = ' '.join(w for w in words if w != word)\n",
    "\n",
    "        # Predict probability for the altered text\n",
    "        if len(altered_text.strip()) == 0:\n",
    "            altered_pred = original_pred.copy()\n",
    "        else:\n",
    "            altered_pred = predict_probabilities_from_text([altered_text])[0]\n",
    "\n",
    "        # Calculate the change in probability for the predicted class\n",
    "        drop = original_pred[original_class] - altered_pred[original_class]\n",
    "\n",
    "        importance_row = {\n",
    "            \"word\": word,\n",
    "            \"importance\": abs(drop),  # Absolute value of the drop\n",
    "            \"class\": label,\n",
    "            \"Description_processed\": text,\n",
    "            \"original_probability\": original_pred[original_class]\n",
    "        }\n",
    "        importance_rows.append(importance_row)\n",
    "    importances_df = pd.DataFrame(importance_rows)\n",
    "\n",
    "    return importances_df\n",
    "\n",
    "\n",
    "openai.api_key=\"API_KEY\"\n",
    "def predict_probabilities_from_text(texts):\n",
    "    vectors = []\n",
    "    for text in texts:\n",
    "        # Split text into words\n",
    "        words = text.split()\n",
    "        if words:\n",
    "            response = openai.Embedding.create(\n",
    "                model=\"text-embedding-3-small\",\n",
    "                input=words\n",
    "            )\n",
    "            word_embeddings = [np.array(item[\"embedding\"]) for item in response[\"data\"]]\n",
    "            vector = np.mean(word_embeddings, axis=0)\n",
    "            vectors.append(vector)\n",
    "        else:\n",
    "            vectors.append(np.zeros(1534))\n",
    "\n",
    "    # Convert list of vectors to a 2D numpy array\n",
    "    vectors = np.vstack(vectors)\n",
    "    return model.predict_proba(vectors)\n",
    "\n",
    "def remove_words(text, words_to_remove):\n",
    "    return ' '.join([word for word in text.split() if word not in words_to_remove])\n",
    "\n",
    "\n",
    "def compute_AOPC_custom(df, top_words, max_K=6):\n",
    "    avg_drops = []\n",
    "    for K in range(0, max_K + 1):\n",
    "        drops = []\n",
    "        for idx, row in df.iterrows():\n",
    "            text = row[\"Description_processed\"]\n",
    "            original_pred = predict_probabilities_from_text([text])[0]\n",
    "            original_class = np.argmax(original_pred)\n",
    "            original_prob = original_pred[original_class]\n",
    "\n",
    "            words_in_text = text.split()\n",
    "            top_words_in_text = [word for word in top_words if word in words_in_text]\n",
    "            num_words_to_remove = min(K, len(top_words_in_text))\n",
    "            words_to_remove = top_words_in_text[:num_words_to_remove]\n",
    "            altered_text = remove_words(text, words_to_remove)\n",
    "\n",
    "            # If no change in the text, the drop is zero\n",
    "            if text == altered_text:\n",
    "                drop = 0\n",
    "            else:\n",
    "                altered_pred = predict_probabilities_from_text([altered_text])[0]\n",
    "                altered_prob = altered_pred[original_class]\n",
    "                drop = original_prob - altered_prob\n",
    "\n",
    "            drops.append(drop)\n",
    "        avg_drop = np.mean(drops)\n",
    "        avg_drops.append(avg_drop)\n",
    "\n",
    "    return avg_drops"
   ],
   "id": "efced45c1544b839",
   "outputs": [],
   "execution_count": 28
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "lime_df = pd.DataFrame(columns=[\"word\", \"importance\", \"class\"])\n",
    "# Initialize the LIME text explainer\n",
    "explainer = LimeTextExplainer(class_names=['cucumber', 'vase'], random_state=42)\n",
    "test_df = df\n",
    "\n",
    "results = Parallel(n_jobs=-1)(delayed(process_instance_lime)(i, text, label) for i, (text, label) in enumerate(tqdm(zip(test_df[\"Description_processed\"], test_df[\"Class\"]))))\n",
    "\n",
    "lime_df = pd.concat(results).reset_index(drop=True)\n",
    "lime_df.to_csv('lime_df_C_Z.csv', index=False)"
   ],
   "id": "accc250ffe1af8c1",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "results_smer = Parallel(n_jobs=-1)(\n",
    "    delayed(process_instance_smer)(i, text, label)\n",
    "    for i, (text, label) in enumerate(tqdm(zip(test_df[\"Description_processed\"], test_df[\"Class\"])))\n",
    ")\n",
    "smer_df = pd.concat(results_smer, ignore_index=True)\n",
    "smer_df.to_csv(\"smer_df_C_Z.csv\", index=False)"
   ],
   "id": "4dae741000a205f4",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-22T15:52:41.349370Z",
     "start_time": "2025-02-22T15:52:35.259515Z"
    }
   },
   "cell_type": "code",
   "source": [
    "global_importances_lime = lime_df.groupby('word')['importance'].mean().reset_index()\n",
    "global_importances_smer = smer_df.groupby('word')['importance'].mean().reset_index()\n",
    "\n",
    "ranked_words_global_lime = global_importances_lime.sort_values(by='importance', ascending=False)['word'].tolist()\n",
    "ranked_words_global_smer = global_importances_smer.sort_values(by='importance', ascending=False)['word'].tolist()\n",
    "\n",
    "top_10_words_lime = ranked_words_global_lime[:10]\n",
    "top_10_words_smer = ranked_words_global_smer[:10]\n",
    "\n",
    "AOPC_LIME = compute_AOPC_custom(test_df, top_10_words_lime, max_K=6)\n",
    "AOPC_SMER = compute_AOPC_custom(test_df, top_10_words_smer, max_K=6)"
   ],
   "id": "bc1e4cc48ee784fb",
   "outputs": [],
   "execution_count": 43
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-02-22T16:00:18.680223Z",
     "start_time": "2025-02-22T16:00:18.586570Z"
    }
   },
   "cell_type": "code",
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot (AOPC_SMER, marker='o', linestyle='-', color='b', label='SMER')\n",
    "plt.plot(AOPC_LIME, marker='x', linestyle='--', color='r', label='LIME')\n",
    "plt.xlabel('Number of words removed', fontsize=14)\n",
    "plt.ylabel('Accuracy decrease', fontsize=14)\n",
    "plt.title('Comparison of AOPC',fontsize=16)\n",
    "plt.grid(True)\n",
    "plt.legend()\n",
    "plt.show()"
   ],
   "id": "8b235378cc958c8d",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 48
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "f2b5f22afd3c49bd"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
